#  Rewrote this based on David Abbot's "vme_list2.crl"
#  in the CODA 2.5 examples directory.
#	P. King; 2005 dec 21.
#
#
#  CODA Readout List for Injector Parity DAQ
 
readout list G0INJ
#maximum output in bytes, number of events 
maximum 10000,5000
vme readout

const TIR_ADDR             = hex 0ed0
const REALLY_READOUT_BEAM_SCALERS = 1
const REALLY_READOUT_VQWK         = 1
const FORCE_SOFTWARE_HMINUS       = 0
variable READOUT_BEAM_SCALERS
variable READOUT_VQWK

#  Define the sub-bank types.
const SCAL_BTYPE     = 0x3101
const VQWK_BTYPE     = 0x3102
const HEL_BTYPE      = 0x3103


include "g0inj.h"

unsigned long laddr;
extern int bigendian_out;


int firstEvents;

static int buffered;
int id = 0;

UINT32 addr_beam     = 0x38d000;
UINT32 addrinc_beam  = 0x724000;
UINT32 nscalers_beam = 2;

UINT32 addr_vqwk;
UINT32 addrinc_vqwk = 0x10000;
UINT32 nvqwk;

int creg = 0;
unsigned long imask = 0x0;
unsigned long rmask = 0xffffffff;
int latch =0;
extern int bigendian_out;
int nscaler;
int bscaler;

int local_mps_counter;
int local_qrt_counter;
int lastqrt_mps_counter;


begin download
  variable res

  # If the ROC is sending data to Little-Endian EB
  # e.g. a x86 Linux CPU then bigendian_out = 0.
  # Unless the ROC is also running on a Little-Endian
  # machine. Then set bigendian_out=1.
  bigendian_out = 0;

  # Setup TIR
  tirInit(TIR_ADDR);

  log inform "Reading flags from file"
  init_strings();

  log inform "Users Download Executed"
   
end download
    

begin prestart

  log inform "Entering User Prestart"

  log inform "Reading flags from file"
  init_strings();

  init trig source VME
  link async trig source VME 1 to vmetrig and vmetrig_done
  event type 1 then read VME 1

# Setup the JLab FlexIO module.
  log inform "Begin setting up the JLab FlexIO module."
%%
  flexioInit(0x0ee0);         /* PORT 1 IS OUTPUT, PORT 2 IS INPUT */
  flexioEnableInputLatch(2);  /* Set port 2 to use the input latch. */
  flexioPrintStatus();
%%


  # Setup the beam scalers.
%%
  nscaler = 0;
  nscaler = getint(NUM_SCALERS);
  if (nscaler==0){
     READOUT_BEAM_SCALERS = 0;
  } else {
     READOUT_BEAM_SCALERS = REALLY_READOUT_BEAM_SCALERS;
  }
%%

  if READOUT_BEAM_SCALERS is equal to 1 then
    log inform "Begin setting up the beam scalers."
%%
    if (addr_beam == 0) {
	daLogMsg("ERROR","INVALID Base Address");
    } else {
	daLogMsg("INFO","Initializing %d scalers starting at addr_beam=0x%08x",nscalers_beam,addr_beam);
	sis3801InitializeMany(addr_beam, addrinc_beam , nscalers_beam);
    }
%%
    log inform "Beam scalers initialized and cleared"
  end if

###  Setup the VQWK modules
%%
  nvqwk = 0;
  nvqwk = getint(NUM_ADCS);
  if (nvqwk==0){
     READOUT_VQWK = 0;
  } else {
     READOUT_VQWK = REALLY_READOUT_VQWK;
  }
%%

  if READOUT_VQWK is equal to 1 then
    log inform "Begin setting up the VQWK modules."
    addr_vqwk = (getint(BASE_ADC)<<16);
    nvqwk     = getint(NUM_ADCS);

    daLogMsg("INFO","Set up %d ADCs beginning with ladd=0x%8x with address steps of 0x%8x",nvqwk,addr_vqwk, addrinc_vqwk);

%%
    int id=0;
    vqwkInit(addr_vqwk, addrinc_vqwk, nvqwk);

    while (id < nvqwk) {
      if (getflag(VQWK_SAMPLE_PERIOD)==2)
        vqwkSetSamplePeriod(id,getint(VQWK_SAMPLE_PERIOD));
      if (getflag(VQWK_NUM_BLOCKS)==2)
        vqwkSetNumberOfBlocks(id,getint(VQWK_NUM_BLOCKS));
      if (getflag(VQWK_SAMP_PER_BLOCK)==2)
        vqwkSetSamplesPerBlock(id,getint(VQWK_SAMP_PER_BLOCK));
      if (getflag(VQWK_GATE_DELAY)==2)
        vqwkSetGateDelay(id,getint(VQWK_GATE_DELAY));
      if (getflag(VQWK_INT_GATE_FREQ)==2)
        vqwkSetIntGateFreq(id,getint(VQWK_INT_GATE_FREQ));
      vqwkPrintStatus(id);
      id++;
    }

    rol->dabufp = (long *)0;
    UEOPEN(ROCCONFIG_EVENT(rol->pid),BT_UI4,0);
    if(rol->dabufp) {
      int id=0;
      while (id < nvqwk) {
        rol->dabufp += vqwkDumpStatus(id, rol->dabufp);
        id++;
      }
    } else {
      daLogMsg("WARN","No buffer, ROC configuration event not written");
    }
    UECLOSE;
%%
    log inform "VQWK ADCs initialized"
  end if

  firstEvents = 0;

  local_mps_counter   = 0;
  local_qrt_counter   = 0;
  lastqrt_mps_counter = 0;

  log inform "Prestart Executed"

end prestart

begin end

  #Disables the trigger
  CDODISABLE(VME,1,0);

  log inform "Sending disable to scalers during end"
#  Disable the beam scalers.
%%
  sis3801DisableMany();
%%
 
  log inform "End Executed"

end end

begin pause

  CDODISABLE(VME,1,0);
  log inform "Pause Executed"

end pause

begin go

  log inform "Entering Go"
 
 log inform "Sending enable to the scalers during go"
#  Enable the beam scalers.
%%
  sis3801EnableMany();
%%

  if READOUT_VQWK is equal to 1 then
  log inform "Clear the ADCs during go"
%%
  /*  Configure the internal or external gating and clock modes,  *
   *  then clear the ADCs.                                        */
  int id=0;
  if (getflag(VQWK_INTERNAL_MODE)==2){
    int gateclkmode = getint(VQWK_INTERNAL_MODE);
    int gateflag = (gateclkmode & 2);
    int clkflag  = (gateclkmode & 1);
    daLogMsg("INFO","Setting gateflag to %d and clockflag to %d.\n",
	gateflag, clkflag);
    while (id < nvqwk){
      vqwkSetGateClockSources(id,gateflag,clkflag);
      id++;
    }
  }
  id=0;
  while (id < nvqwk){
    vqwkClearAllChannels(id);
    id++;
  }
%%
  end if

  CDOENABLE(VME,1,0); /* Enable Interrupts from TS */ 

end go

begin trigger vmetrig

  variable event_ty, event_no, sync_or_unbuffered_event
  variable do_beam_readout
  variable i, value

  UINT32 index,  header, real_num_of_words, num_of_words;
  UINT32 input_reg, old_out_reg, output_reg, tmp_reg, old_reg;

  int    timer[21];

  num_of_words=32;

  tir[1]->tir_oport = 0x80;  /*set output 7 on tir high*/

  event_ty = EVTYPE;
  event_no = *rol->nevents;
#  logMsg("EVTYPE=%d\n",EVTYPE); 

%%
  /* PORT 1 IS OUTPUT, PORT 2 IS INPUT */
  input_reg  = flexioReadData(2);
  output_reg = flexioReadData(1);
  if (FORCE_SOFTWARE_HMINUS == 1) {
     /* Force the second bit of the input register to be the   *
      * inverse of the first bit.                              */
     old_reg = input_reg;
     input_reg = (old_reg & (~ 0x2)) | (( (~(old_reg & 0x1))<<1) & 0x2);
  }
%%

  rol->dabufp = (long *)0;

  open event type EVTYPE of BT_BANK
     if READOUT_BEAM_SCALERS is equal to 1 then
       open bank SCAL_BTYPE of BT_UI4
%%
         /* Put the three scan words here, then the beam scalers. */
         *rol->dabufp++ = getCleanSCAN();
         *rol->dabufp++ = getDataSCAN(1);  
         *rol->dabufp++ = getDataSCAN(2);  
         *rol->dabufp++ = 0;

         /*  Output the values of the beam scalers.              */
         id=0;
         index  = 0;
         header = 0x0;
         while (id < nscalers_beam)
         {
           *(rol->dabufp)++ = header;
           real_num_of_words = sis3801ReadOneModule(id,num_of_words, rol->dabufp);
	   if (id==1) {
  	     local_mps_counter += (rol->dabufp[0] & 0xffffff);
	     local_qrt_counter += (rol->dabufp[1] & 0xffffff);
           }
           rol->dabufp--;
           header = (index<<16) + real_num_of_words;
           *(rol->dabufp)++ = header;
           rol->dabufp += real_num_of_words;
           index += real_num_of_words;
           id++;
         }
%%
       close bank
       end if

       if READOUT_VQWK is equal to 1 then
       open bank VQWK_BTYPE of BT_UI4
%%
	 int id = 0;
         if (firstEvents>0){
    	   id=0;
   	   tir[1]->tir_oport = 0x82;  /*set output 7 & 1 on tir high*/
   	   daLogMsgI("WARN","Clearing all ADCs at beginning of event %d.",
  	                      event_no);
 	   while (id < nvqwk) {
	      vqwkClearAllChannels(id);
 	     id++;
 	   }
 	   tir[1]->tir_oport = 0x80;  /*set output 7 on tir high*/
 	   firstEvents--;
 	 } else {
           int readcounter_max = 2;
           int readcounter;
           int clearall = 0;
           id=0;
  	   tir[1]->tir_oport = 0x81;  /*set output 7 & 1 on tir high*/
           while (id < nvqwk){
             timer[id] = vqwkWaitForDataReady(id, 0xFF, 30);
             if (timer[id]<0) {
               daLogMsgI("WARN","Ev#%d: VQWK %d timed out with timer=%d.",
                          event_no, id, timer[id]);
             }
             id++;
           }
           id=0;
       	   tir[1]->tir_oport = 0x88;  /*set output 7 & 3 on tir high*/
           clearall = 0;
           while (id < nvqwk) {
             if (vqwkProbeDataReady(id)!=0){
               rol->dabufp+=vqwkBlockRead(id, rol->dabufp);
             } else {
	       /*  Let's put in some fake data with debugging info. */
	       *(rol->dabufp)++ = 'FAKE';
	       *(rol->dabufp)++ = event_no;
	       *(rol->dabufp)++ = id;
	       *(rol->dabufp)++ = 0;
	       *(rol->dabufp)++ = 0;
	       *(rol->dabufp)++ = 0;
	       rol->dabufp += 7*6;
             }
             if (vqwkProbeDataReady(id)!=0){
               daLogMsgI("WARN","Ev#%d: VQWK %d has extra data.  Clear all!",
                          event_no, id);
               clearall = 1;
             }
             id++;
           }
           if (clearall == 1){
             id=0;
             daLogMsgI("WARN","Ev#%d: Clearing all!", event_no);
             while (id < nvqwk) {
               vqwkClearAllChannels(id);
               id++;
             }
             clearall = 0;
           }
         }
       	 tir[1]->tir_oport = 0x80;  /*set only output 7 on tir high*/
%%
       close bank
       end if

       open bank HEL_BTYPE of BT_UI4
%%
         int id=0;
         UINT32 qrtbit = (input_reg & 0x4);

         *(rol->dabufp)++ = input_reg;
         *(rol->dabufp)++ = output_reg;
         *(rol->dabufp)++ = local_mps_counter; /* MPS counter */
         *(rol->dabufp)++ = local_qrt_counter; /* QRT counter */

         /* QRT phase counter */

	 if (qrtbit == 0x4){
	   /*  QRT bit is set */
           lastqrt_mps_counter = local_mps_counter - 1;
         }
         *(rol->dabufp)++ = local_mps_counter - lastqrt_mps_counter;

         /* Put the three scan words here, then the beam scalers. */
         *rol->dabufp++ = getCleanSCAN();
         *rol->dabufp++ = getDataSCAN(1);
         *rol->dabufp++ = getDataSCAN(2);
         *rol->dabufp++ = 0;
	 *rol->dabufp++ = ' ADC';

         id=0;
         while (id < nvqwk) {
           *rol->dabufp++ = timer[id];
	   id++;
         }
%%
       close bank

   close event
  tir[1]->tir_oport = 0x80;  /*set only output 7 on tir high*/


end trigger

begin done vmetrig
 
  tir[1]->tir_oport = 0x00;  /*set output 7 on tir low*/
# logMsg("Done vmetrig Complete \n");
end done

begin done

# Acknowledge tir register
  CDOACK(VME,1,0);

end done

begin status
end status
