#  -*- c -*-
# 
# CODA Readout list for HAPPEX-H/He
#
#    Bob Michaels, Antonin Vacheret  (Oct 2000)
#    Kent Paschke, Bryan Moffit (since then)
#    This version for Lumi, may be merged with other later.

readout list VME1
maximum 10240,100
vme readout
ts control
/* All the memory maps of VME modules are defined in module_map.h  */
include "../module_map.h"
/* User strings to control some readout */
include "usrstrutils.c"
include "lumi_includes.h"

# default timing board DAC values
const  DEF_DAC12   =    0       /* output voltage = 0 */
const  DEF_DAC16   =    32767   /* output voltage = 0 */
const  MAX_DAC12   =    4095    /* max DAC12 */
# all other timing parameters are set in separate utilities

# Number of random array elements
# 2e6 good for 2 hours (at 30Hz) for 9 ADCs.
const RANDNUM = 200000

# Number of scalers (set to two, might be one... still okay)
const NSCALER = 2
# Switch all this, depending on which kind of scaler 
# Must be consistent with preprocessor switch below (TYPE_SIS3800, etc)
const SCALER0 = hex a40000
const SCALER1 = hex a50000

# if LINUXHOST=1(0) host is linux(not)
const LINUXHOST = 1
const TRIG_ADDR = hex 0ad0
const FLEXIO_ADDR = hex 0ed0

const FIFO_EMPTY = hex 100

const OPORT_BUSY = 1   /* bit 1 = busy output */
const OPORT_INB  = 2   /* bit 2 = inhibit output for other 2 DAQs */
const OPORT_LNE  = 4   /* bit 3 = LNE for scaler FIFO */

  /* 18-Bit ADC Parameters*/ 

const MAX18CNT = 100
const BAD18DATA = 9999
const INTERNAL=0
const EXTERNAL=1
const TIME18 = INTERNAL

  /* Decision to syphon off Lumi data (1), or not (0) */
const SYPHON_LUMI = 1
const LUMI_CLOCK_CHAN=15

int oport_state;   /* output port state (global variable) */

static int noscaler, scaler2, bmwscan, tbreadout, evtypefix, flexio, flexio2;
static int adc18bit, numadc18, adc16bit, mtread, rampdac12;

unsigned short ranny[RANDNUM];  /* array of random integers */

/* This is for Lumi data to be syphoned off */
extern struct LumiEvent lumibuff[MAXBUF];
extern int lumi_write_pointer;
extern int lumi_daqstatus;

extern int bigendian_out;
static FUNCPTR handlerPtr;
VOIDFUNCPTR isr;

volatile struct vme_flex_io *flex_io;

# Switch here if picking a different kind of scaler
# Either TYPE_SIS3801, TYPE_SIS3800, TYPE_LEC1151, or TYPE_CAEN560 
# may be one, not all 1.
%% 
#undef TYPE_CAEN560
#undef TYPE_SIS3800 
#undef TYPE_LEC1151 
#define TYPE_SIS3801
#ifdef TYPE_SIS3801
volatile struct fifo_scaler *pscaler[NSCALER];
#define DATA_MASK 0xffffff
#endif
#ifdef TYPE_SIS3800
volatile struct SIS3800 *pscaler[NSCALER];
#endif
#ifdef TYPE_LEC1151
volatile struct lecroy_1151_scaler *pscaler[NSCALER];
#endif
#ifdef TYPE_CAEN560
volatile struct caen_v560_scaler *pscaler[NSCALER];
#endif

%%

begin download

# Sending data to Little-Endian EB
%%  
  int i,j,tmode,mode,res;
  unsigned short temp;
  unsigned long laddr;
  extern void srand();
  extern int rand();
  int chkcsr, retry;
  CODA_RUN_IN_PROGRESS = 0;

  if (LINUXHOST) {
      printf("Assuming EB is on a Little-Endian cpu\n");      
      bigendian_out = 0;
  }

init_strings();

noscaler=0;scaler2=0;bmwscan=0;tbreadout=0;evtypefix=0;flexio=0,flexio2=0;
adc18bit=0;adc16bit=0;mtread=0,rampdac12=0;
noscaler  = getflag(NOSCALER);   /* No scaler used for this crate */
scaler2   = getflag(SCALER2);    /* Use 2 scalers for this crate */
bmwscan   = getflag(BMWSCAN);    /* Readout Beam Modulation and Scan Words */
tbreadout = getflag(TBREADOUT);  /* Write Timing Board config to file */
evtypefix = getflag(EVTYPEFIX);  /* Correct event type for Injector DAQ */
flexio    = getflag(FLEXIO);     /* Readout Flexible I/O Module */
flexio2   = getflag(FLEXIO2);    /* Readout Flexible I/O Module */
adc18bit  = getflag(ADC18BIT);   /* 18-bit ADC tests  */
adc16bit  = getflag(ADC16BIT);   /* 16-bit ADC exists(1) or not(0)   */
mtread    = getflag(MTREAD);     /* Empty readout ?  (1).  For tests */
rampdac12 = getflag(RAMPDAC12);  /* To ramp the 12-bit DAC */

/* Printout User String Configuration */
printf("*** User String Configuration ***\n");
if (adc18bit) {
  printf("Will use 18-bit ADC \n");
} 
if(noscaler == 0) {
  printf("WILL readout scaler: %d\n",noscaler);
} else {
  printf("Will NOT readout scaler: %d\n",noscaler);
}
if(scaler2 == 0) {
  printf("Will NOT readout second scaler\n");
} else {
  printf("WILL readout second scaler\n");
}
#ifdef BMWSTUFF
if(bmwscan==1) {
  printf("WILL readout Beam Modulation and Scan Words: %d\n",bmwscan);
} else {
  printf("Will NOT readout Beam Modulation and Words: %d\n",bmwscan);
}
#endif
if(tbreadout==1) {
  printf("WILL write timing board config to file: %d\n",tbreadout);
} else {
  printf("Will NOT write timing board config to file: %d\n",tbreadout);
}
if(evtypefix) {
  printf("WILL use EVTYPE fix for Injector DAQ: %d\n",evtypefix);
}
if(flexio==1) {
  printf("WILL readout Flexible IO Module: %d\n",flexio);
} else {
  printf("Will NOT readout Flexible IO Module: %d\n",flexio);
}
if(flexio2==1) {
  printf("WILL readout Flexible IO Module2: %d\n",flexio2);
} else {
  printf("Will NOT readout Flexible IO Module2: %d\n",flexio2);
}
if (rampdac12) printf("Will ramp the 12-bit DAC from %d to %d \n",DEF_DAC12,MAX_DAC12);

/* Setup Device Pointers */

/* Setup TIR */
tirInit(TRIG_ADDR);


/* TIR Pointer  - the old way (CODA v<2.2.1)
   res = sysBusToLocalAdrs(0x29,TRIG_ADDR,&laddr);
   if (res != 0) {
   printf("Error in sysBusToLocalAdrs res=%d \n",res);
   printf("ERROR:  TIR POINTER NOT INITIALIZED");
   } else {
   printf("Trigger Interface address = 0x%x\n",laddr);
   tir[1] = (struct vme_tir *)laddr;
   }
*/

if(flexio == 1) {
  /* FlexIO Pointer */
  res = sysBusToLocalAdrs(0x29,FLEXIO_ADDR,&laddr);
  if (res != 0) {
    printf("Error in sysBusToLocalAdrs res=%d \n",res);
    printf("ERROR:  FlexIO POINTER NOT INITIALIZED");
  } else {
    printf("FlexIO address = 0x%x\n",laddr);
    flex_io = (struct vme_flex_io *)laddr;
  }
  flex_io->csr1 = 0x8000; /* Reset Module */
  flex_io->csr1 = 0x3;    /* Enable External Strobe and Latch Mode */
}

if(flexio2 == 1) {
  /* FlexIO2 Pointer */
  res = sysBusToLocalAdrs(0x29,FLEXIO_ADDR,&laddr);
  if (res != 0) {
    printf("Error in sysBusToLocalAdrs res=%d \n",res);
    printf("ERROR:  FlexIO2 POINTER NOT INITIALIZED");
  } else {
    printf("FlexIO2 address = 0x%x\n",laddr);
    flex_io = (struct vme_flex_io *)laddr;
  }
/*   flex_io->csr1 = 0x8000; /\* Reset Module *\/ */
/*   flex_io->csr1 = 0x3;    /\* Enable External Strobe and Latch Mode *\/ */
  flex_io->csr2 = 0x8000; /* Reset Module */
  flex_io->csr2 = 0x3;    /* Enable External Strobe and Latch Mode */
}

/* ADC16 Configuration */
// show default configurations
  if (adc16bit) {
    showHAPADC(-1);
  }

/* Timing Board configuration */
/* Normally, all timing configuration should be done in separate routines, 
to avoid ambiguity, but at the moment (3/09) the Green Monster isn't working */
  setDACHAPTB(1,DEF_DAC12);
  setDACHAPTB(2,DEF_DAC16);
  dumpRegHAPTB();

if(noscaler == 0) {
  /* switch this, depending on which kind of scaler */
#ifdef TYPE_SIS3801
  res = sysBusToLocalAdrs(0x39,SCALER0,&laddr);
  if (res != 0) {
    printf("Error in sysBusToLocalAdrs res=%d \n",res);
    printf("ERROR:  SCALER POINTER NOT INITIALIZED");
  } else {
    printf("SIS3801 Scaler address = 0x%x\n",laddr);
    pscaler[0] = (struct fifo_scaler *)laddr;
  }
  
  pscaler[0]->reset=1;
  pscaler[0]->csr=0xff00fc00;
  pscaler[0]->clear=1;
  pscaler[0]->enable=1;
  mode = 2;
  tmode = mode << 2;
  pscaler[0]->csr=0x00000C00;  /* clear Mode bits to Mode 0*/
  pscaler[0]->csr=tmode;       /* set new Mode */
  pscaler[0]->csr=0x10000;     /* Enable External Next Clock */
  pscaler[0]->csr=0x40000;     /* Enable External Disable */

  /* Do this for a second scaler */
  if(scaler2==1) {
    res = sysBusToLocalAdrs(0x39,SCALER1,&laddr);
    if (res != 0) {
      printf("Error in sysBusToLocalAdrs res=%d \n",res);
      printf("ERROR:  SCALER POINTER NOT INITIALIZED");
    } else {
      printf("SIS3801 Scaler address = 0x%x\n",laddr);
      pscaler[1] = (struct fifo_scaler *)laddr;
    }
  
    pscaler[1]->reset=1;
    pscaler[1]->csr=0xff00fc00;
    pscaler[1]->clear=1;
    pscaler[1]->enable=1;
    mode = 2;
    tmode = mode << 2;
    pscaler[1]->csr=0x00000C00;  /* clear Mode bits to Mode 0*/
    pscaler[1]->csr=tmode;       /* set new Mode */
    pscaler[1]->csr=0x10000;     /* Enable External Next Clock */
    pscaler[1]->csr=0x40000;     /* Enable External Disable */
  }
#endif  
#ifdef TYPE_SIS3800
  pscaler[0] = (struct SIS3800 *) SCALER0;
  for (i=0; i < NSCALER; i++) {
    pscaler[i]->reset = 1;
    pscaler[i]->csr = 0x7000fd00;
    pscaler[i]->clear = 1;
    pscaler[i]->enclk = 1;
    pscaler[i]->csr=0x00000C00;  /* clear Mode bits to Mode 0*/
    mode = 1;
    pscaler[i]->csr=(mode<<2);       /* set mode */
  }
#endif
#ifdef TYPE_LEC1151
  pscaler[0] = (struct lecroy_1151_scaler *) SCALER0;
  for (i=0; i < NSCALER; i++) {
    pscaler[i]->reset = 0;
  }
#endif
#ifdef TYPE_CAEN560
  pscaler[0] = (struct caen_v560_scaler *) SCALER0;
  for (i=0; i < NSCALER; i++) {
    pscaler[i]->ClrR = 0;
    temp = pscaler[i]->clrVETOR;
  }
#endif
}

srand(9421);       /* seed random num generator */


/* Clear TIR */
tir[1]->tir_csr = 0x80;
/* inhibit bit */
oport_state |= OPORT_INB;   
tir[1]->tir_oport=oport_state;

lumi_daqstatus=0;
lumi_write_pointer=0;

%%

log inform "User Download Executed"

end download
    
begin prestart

log inform "Entering User Prestart"

%%
  int j;
  unsigned short tmp_rand;
  int iadc;
  int bad_randmake=0;
  extern void srand();
  extern int rand();

  CODA_RUN_IN_PROGRESS = 0;

  lumi_write_pointer=0;
  lumi_daqstatus=0x1;  
 
/* If no Green Monster Timing Board should get set here */
   setTimeHAPTB(20,13200);
   setOverSampleHAPTB(0);
   printf("Setting Oversampleing");
   dumpRegHAPTB();
/*******************************************************/

/* Fill Random Integer Array 
   Do this during prestart, so that each run has a different ranny array*/

if (adc16bit) {
  printf("Generating Random Integer Array\n");
  printf("Number of Array elements = %d\n",RANDNUM);
  srand(ncnt);  /* seed random number generator with the event counter */
  bad_randmake=0;
  for (j=0;j<RANDNUM;j++) {
    /* Generate random integers from 2048 to 63488 */
    tmp_rand = (unsigned short) (61440.0*rand()/(32768+1.0));
    while(tmp_rand==0 || tmp_rand==-1) {
      bad_randmake=1;
      tmp_rand = (unsigned short) (61440.0*rand()/(32768+1.0));
    }
    ranny[j] = 2048 + tmp_rand;
  }

  if(bad_randmake==1) {
    int badfile;
  
    badfile=fopen("~apar/bryan/badrand/badrand.hist","a");
    fprintf(badfile,"Another bad random number generation at ncnt=%d\n",
	  ncnt);
    fclose(badfile);
  }
}
%%

  init trig source VME
  link async trig source VME 1 to partrig and partrig_done
  event type 1 then read VME 1

%%

  /* dont know why I need this (int iadc) a 2nd time */
  int iadc, ped_test;

  if(tbreadout==1) {
    /* Send timing board information to ~apar/db/timebrd/timebrd.cfg */
    
    int fdbfile;
    
    fdbfile=fopen("~apar/db/timebrd/timebrd.cfg","w");
    fprintf(fdbfile,"# Timing board information:\n# Integrate Time = %.2f ms, Ramp Delay = %.2f us\n\ \ \ \ oversamp %d ",
	    (double)getIntTimeHAPTB()*0.0025,
	    (double)getRampDelayHAPTB()*2.5,
	    (int)getOverSampleHAPTB()+1);
    fclose(fdbfile);
  }

  numadc18 = 0;

  if (adc18bit) {

/* Set up 18-bit ADC */

     adc18_zeromem();
     adc18_initall();
     numadc18 = adc18_getNum();

     for (iadc = 0; iadc < numadc18; iadc++) {
       printf("Setting up ADC18 # %d \n",iadc);
       adc18_timesrc(iadc,0,0,0);  /* External time source */
       adc18_gatemode(iadc,1);            
       adc18_intgain(iadc,3);   /* intgain: 0-3, where 3 is minimum */
       adc18_setconv(iadc,0);  /* conv (gain): 0-15 where 0 is minimum */
       adc18_setsample(iadc,1);
       adc18_loaddac(iadc,0);      
       ped_test = 1900;

// The 2 ADC18 on R-HRS are, resp. rev2-1 and rev2-3. (Oct 2008)

       if (iadc==1) adc18_setpedestal(iadc, 2250, 2087, 2520, 1690);  

       if (iadc==2) {
	 adc18_setpedestal(iadc, 1927, 1994, 2228, 1985);
       }
       
       //adc18_setpedestal(iadc, ped_test, ped_test, ped_test, ped_test);
       adc18_flush(iadc);
     }

  }



%%

  log inform "User Prestart Executed"

end prestart

begin end

  CDODISABLE(VME,1,0);

# inhibit bit
  oport_state |= OPORT_INB;   
  tir[1]->tir_oport=oport_state;

/* Disable LNE Flag */
   oport_state |= oport_state & 0xfb;
   tir[1]->tir_oport=oport_state;

  CODA_RUN_IN_PROGRESS = 0;

  lumi_daqstatus = 8;

  log inform "User End Executed"

end end

begin pause

  CDODISABLE(VME,1,0);
  log inform "User Pause Executed"

end pause

begin go
  
  log inform "Entering User Go Go (bob)"
  
%% 
  int i, kk, iadc, ichan, nscaler;
  unsigned short temp;

  lumi_daqstatus |= 0x2;
  lumi_write_pointer=0;

if(noscaler == 0) {
#ifdef TYPE_SIS3801
  /* SIS3801 */
  if(scaler2==1) {
    nscaler = 2;
  } else {
    nscaler = 1;
  }
  for (i=0; i<nscaler; i++) {
    pscaler[i]->csr = 0x1000000; /* disable LNE */
    pscaler[i]->clear = 1;
    pscaler[i]->next = 1;  /* flush FIFO */
    pscaler[i]->csr = 0x10000; /* enable LNE */
  }
#endif
#ifdef TYPE_SIS3800
  /* SIS3800 */
  for (i=0; i<NSCALER; i++) pscaler[i]->clear = 1;
#endif
#ifdef TYPE_LEC1151
  /* LeCroy 1151 */
  for (i=0; i<NSCALER; i++) pscaler[i]->reset = 1;
#endif
#ifdef TYPE_CAEN560
  for (i=0; i < NSCALER; i++) {
    pscaler[i]->ClrR = 0;
    temp = pscaler[i]->clrVETOR;
  }
#endif
}

if(flexio == 1) {
  flex_io->csr1 = 0x100; /* Re-Activate Strobe */
  flex_io->csr1 = 0x03; /* Re-Activate Strobe */
}
if(flexio2 == 1) {
/*   flex_io->csr1 = 0x100; /\* Re-Activate Strobe *\/ */
/*   flex_io->csr1 = 0x03; /\* Re-Activate Strobe *\/ */
  flex_io->csr2 = 0x100; /* Re-Activate Strobe */
  flex_io->csr2 = 0x03; /* Re-Activate Strobe */
}

for (iadc = 0; iadc<numadc18; iadc++) {
  printf("Flushing adc18 number %d\n",iadc);
  adc18_flush(iadc);
}

/* remove the inhibit */
%%  
/* We dont actually use this anymore.. */
/* But just in case... just comment out the taskDelay. */
   log inform "wait... will remove inhibit"
   //   taskDelay(600);
   log inform "about to remove inhibit"
   oport_state = oport_state & 0xfd; 
   tir[1]->tir_oport=oport_state;

/* Enable LNE Flag */
   oport_state |= OPORT_LNE;
   tir[1]->tir_oport=oport_state;

  if (rampdac12) setDACHAPTB(1,DEF_DAC12);

  CDOENABLE(VME,1,0);
  CODA_RUN_IN_PROGRESS = 1;

end go

begin trigger partrig

variable i,j,kk, iadc, ichan, event_ty, event_no, wptr
variable icnt, nevt, nword, ncnt, nadc18cnt, csrA, csrB
unsigned long ltest;
unsigned short junk;
static int dac16val=DEF_DAC16;
static int dac12val=DEF_DAC12;
static int maxdac16=65535;
static int maxdac12=3650;
int inumdat,ioverflow;
int timeout;
int maxloop=50000;
unsigned short rannum;
int tirdata;
static int k;
static int rannyint;
int errstat;
unsigned long sdata[NSCALER*32*12];
unsigned long adc18data[MAX18CNT];
int pulseclean;
int localBMWobj;
int localBMWval;
int localBMWcycnum;
int nscaler;
int iocTime;
static int dacnoise18=10000;
static int MINDAC18=10000;
static int MAXDAC18=30000;
static int dacsign18 = 1;
static int setdac18_local = 0;
 int what1=0;

int* intpointer;

/* Enable BUSY Flag */
oport_state |= OPORT_BUSY;
tir[1]->tir_oport=oport_state;

%%
if(evtypefix==1) EVTYPE &= 1;  /* Fix event type for Injector DAQ */
event_ty = EVTYPE;
event_no = *rol->nevents;
iocTime = vxTicks;
lumi_daqstatus |= 0x4;

%%



rol->dabufp = (long *)0;
open event type EVTYPE of BT_UI4

*rol->dabufp++ = 0xffb0b444;    

%%


if ( !mtread )  {

ncnt++;

// Read out TIR inputs FIRST!  It contains helicity info. 
*rol->dabufp++ = 0xffdaf000;    /* Header for TIR */
if(flexio==1) {
  *rol->dabufp++ = flex_io->data1;
  flex_io->csr1 = 0x100;
  flex_io->csr1 = 0x03;
  junk = flex_io->csr1;
} else if(flexio2==1) {
  *rol->dabufp++ = flex_io->data2;
/*   flex_io->csr1 = 0x100; */
/*   flex_io->csr1 = 0x03; */
  flex_io->csr2 = 0x100;
  flex_io->csr2 = 0x03;
  junk = flex_io->csr2;
} else {
  /* In TS Control, readout from IPORT */
  tirdata = tir[1]->tir_iport;
  *rol->dabufp++ = tirdata & 0xfff;
  }

#ifdef BMWSTUFF
if(bmwscan==1) {
  //////////////////////////////////////////////////
  //
  // BMW: early in readout! (the bmw process in asynchronous,
  //      and we don't want nuthin' to change before we see it
  //
  //////////////////////////////////////////////////
  localBMWobj = bmw_object;
  localBMWval = bmw_value;
  localBMWcycnum = bmw_cycle_number;
  
  //  record if event was unclean for any portion of pulse
  pulseclean = bmw_clean_pulse;
  
  //  if pulse was at some point unclean, but ended clean, prepare
  //  next pulse to be seen as clean
  if (!(pulseclean==1) && (bmw_clean==1)) bmw_clean_pulse=1;  
}
#endif

if(noscaler == 0) {

#ifdef TYPE_SIS3801
  if(scaler2==1) {
    nscaler=2;
  } else {
    nscaler=1;
  }
  errstat = 0;
  for (i = 0; i <nscaler; i++) {
    timeout = 0;
    while ( (pscaler[i]->csr&FIFO_EMPTY) != FIFO_EMPTY && timeout++ < 10) {
      for (j = 0; j < 32; j++) {
	sdata[i*32+j] = ((int)pscaler[i]->fifo[0])&DATA_MASK;  
      }
    }
  }
  if (timeout > 1) {
    errstat = 1;
    for (i = 0; i <nscaler; i++){
      pscaler[i]->clear = 1;
    }
  }
  *rol->dabufp++ = 0xfffca000 + nscaler + (errstat<<4); /* Header for scaler */
  for (i = 0; i <nscaler; i++){
    for (j = 0; j < 32; j++) {
      *rol->dabufp++ = sdata[i*32+j];
    }
  }
#else 
  
  *rol->dabufp++ = 0xfffca000 + NSCALER;   /* Header for scaler */
  
#endif
#ifdef TYPE_SIS3800
  /* SIS3800 scaler */
  for (i=0; i < NSCALER; i++) {
    for (j=0; j < 32; j++) {
      *rol->dabufp++ = pscaler[i]->readCounter[j];
    }
  }
#endif
#ifdef TYPE_LEC1151
  /* LeCroy 1151 scaler */
  for (i=0; i < NSCALER; i++) {
    for (j=0; j < 16; j++) {
      *rol->dabufp++ = pscaler[i]->scaler[j];
    }
    for (j=0; j < 16; j++) *rol->dabufp++ = 0;  
  }
#endif
#ifdef TYPE_CAEN560
  /* CAEN model 560 scaler */
  for (i=0; i < NSCALER; i++) {
    for (j=0; j < 16; j++) {
      *rol->dabufp++ = pscaler[i]->CntR[j];
    }
    for (j=0; j < 16; j++) *rol->dabufp++ = 0;  
  }
#endif
}


  if (adc18bit) {  /* read out the 18-bit ADCs.  */
     *rol->dabufp++ = 0xfadc1800+numadc18;
     for (iadc = 0; iadc < numadc18; iadc++) {

            
       adc18_softreset(iadc);
       adc18_go(iadc); 

       csrA = adc18_getcsr(iadc); 

       if (setdac18_local) {
         dacnoise18 = dacnoise18 + dacsign18 * 10;
         if (dacnoise18 > MAXDAC18) dacsign18 = -1;
         if (dacnoise18 < MINDAC18) dacsign18 = 1;
         adc18_setdac(iadc,dacnoise18);
       }

       icnt=0;
       for (j=0; j<maxloop; j++) {
         icnt++;
         if ( !adc18_Busy(iadc) ) break;
       } 

       /* Put a little more delay, once through is ~10 usec */

       for (j=0; j<5; j++) {
         adc18_Busy(iadc);
       } 
             
       
       csrB = adc18_getcsr(iadc); 
  
       *rol->dabufp++ = 0xfb0b4000; 
       *rol->dabufp++ = tirdata & 0xfff;
       *rol->dabufp++ = iadc;
       *rol->dabufp++ = maxloop;
       *rol->dabufp++ = icnt;
       *rol->dabufp++ = csrA;
       *rol->dabufp++ = csrB;
   
       nevt = adc18_getevtcnt(iadc);
       nword = adc18_getwordcnt(iadc);
       nadc18cnt = nevt*nword; 

       *rol->dabufp++ = nevt;
       *rol->dabufp++ = nword;

       if(icnt > maxloop-10 ) { 
           *rol->dabufp++ = 0xfa180bad; 
       } else {
           *rol->dabufp++ = nadc18cnt;

           ioverflow = 0;  /* flag indicating an overflow */
         
// Put only 'nword' data into datastream. Decoding requires event size does not change.
// Possible flaw if nword is changing which it doesnt seem to.

           for (j=0; j<nword; j++) {
             if (adc18_DataAvail(iadc)) {
                *rol->dabufp++ =  adc18_getdata(iadc);
	     } else {
 	        *rol->dabufp++ =  BAD18DATA;  /* should not happen ! */
	     }
	   }

// If data still available, flag this event and flush the buffer (but not forever, timeout)
// We'll need to figure out what this means.
         
           timeout = 0;
           while (adc18_DataAvail(iadc) && timeout++ < 10000)  {
 	      ioverflow = 1; 
              adc18_flush(iadc); 
           }
           if (ioverflow) {
                *rol->dabufp++ = 0xfa18bad1;  /* Might be a bad event (deadtime ?)  */
           } else {
                *rol->dabufp++ = 0xfa18b0b1; 
           }

       }

     }

  }  /* end of 18-bit ADC */


  if (adc16bit) {
    
    *rol->dabufp++ = 0xffadc000 + ADC_NUMSLOTS;   /* Header for ADC */  
    
    for (i=0; i < ADC_NUMSLOTS; i++) rol->dabufp = readoutHAPADC(rol->dabufp,i);
    
  }

 if (SYPHON_LUMI) {  /* syphon off LUMI data for Transversity */

   lumibuff[lumi_write_pointer].header = 0xb0b00000+lumi_write_pointer;
   lumibuff[lumi_write_pointer].evnum = event_no;
   lumibuff[lumi_write_pointer].tirdata = tirdata & 0xfff;

   for(i=0; i<32; i++){
   lumibuff[lumi_write_pointer].scalers[i] = sdata[i];
   //   lumibuff[lumi_write_pointer].scaler_clock = sdata[LUMI_CLOCK_CHAN];
   }

   kk = 0;
   for (iadc = 0; iadc < ADC_NUMSLOTS; iadc++) {
/*      if (iadc < NUMLDAT) { */
/*          lumibuff[lumi_write_pointer].DACnoise[iadc] = getDACHAPADC(iadc); */
/*      } */
     for (ichan = 0; ichan < 4; ichan++) {
       if (kk < NUMLDAT) {
         lumibuff[lumi_write_pointer].DACnoise[kk] = getDACHAPADC(iadc);
         lumibuff[lumi_write_pointer].lumidata[kk++] = getOneADC16(iadc,ichan);
       }
     }
   }
   lumi_write_pointer++;
   wptr = (lumi_write_pointer%MAXBUF);
   lumi_write_pointer = wptr;

 }

  
*rol->dabufp++ = 0xfffbd000;    /*  Header for timing board info */
*rol->dabufp++ = getDataHAPTB();
*rol->dabufp++ = getRampDelayHAPTB();
*rol->dabufp++ = getIntTimeHAPTB();
*rol->dabufp++ = (getOverSampleCurrentHAPTB() << 8) + getOverSampleHAPTB();
*rol->dabufp++ = getDACHAPTB(2); /* DAC16 */
*rol->dabufp++ = getDACHAPTB(1); /* DAC12 */

#ifdef BMWSTUFF
if(bmwscan==1) {
  *rol->dabufp++ = 0xfdacf000;  // Header for daqflags

  /* Start with BMW words */
  *rol->dabufp++ = pulseclean;  //record in bmw says entire pulse was clean
  *rol->dabufp++ = localBMWobj; //record the last-moved object (from beginning of readout)
  *rol->dabufp++ = localBMWval; // record the value of the last-moved object
  *rol->dabufp++ = localBMWcycnum; // record the number of this supercycle 

  /* Scan words next */
  *rol->dabufp++ = getCleanSCAN();
  *rol->dabufp++ = getDataSCAN(1);  
  *rol->dabufp++ = getDataSCAN(2);  

  /* Now the vxWorks Clock and software event increment*/
  *rol->dabufp++ = iocTime;
  *rol->dabufp++ = ncnt;
}
#endif

if (adc16bit) {
  for (i = 0; i < ADC_NUMSLOTS; i++) {  
    if (usesDACHAPADC(i)==1) {
    // lookup table of random numbers
    rannum = ranny[rannyint];   /* rand goes from 0 to 32768 */
    rannyint++;
    if (rannyint>RANDNUM-1) rannyint=0;
    
    setDACHAPADC(i,rannum);
  
    // alternate methods of choosing dac noise values
    //
    //       rannum = 2048 + rand();   /* rand goes from 0 to 32768 */
    //
    //        if (rannum % 2 == 0){
    //          dac_count[i] = 5000;
    //        } else {
    //          dac_count[i] = 60000;
    //        }             
    //
  }
 }
}  /* if (adc16bit) block */


// This is for tests using tboard dac

/*  rannum = 2000 + rand();*/

//  if (dac16val >= maxdac) dac16val = 18000;
//  //  test for differences measurements...    
//      if (rannum % 2 == 0){
//      dac16val = 49000;  
//      } else{
//      dac16val = 50000; 
//      }    
//  setDACHAPTB(2,dac16val);


/* Increment dac16 by 5 each window */
if(getOverSampleCurrentHAPTB()==0) {
  dac16val = dac16val + 5; 
} 

/* For the synch monitor.  Use dac12. */
/* Note that dac12 will saturate the v2f at high voltage 
   so, set the max around 3650.*/

  if ( rampdac12 ) {   /* ramp function */ 

    dac12val += 10;  
    if (dac12val >= MAX_DAC12) dac12val = 0;

  } else {             /* random */
 
     dac12val = 1602+rand()%2048;

  }

  setDACHAPTB(1,dac12val);
  getDACHAPTB(1);
  setDACHAPTB(1,dac12val);
  getDACHAPTB(1);

/* if (dac16val >= maxdac16) dac16val = 32767; */
/* setDACHAPTB(2,dac16val); */
/* getDACHAPTB(2); */
/* setDACHAPTB(2,dac16val); */
/* getDACHAPTB(2); */

/* Disable BUSY Flag */
oport_state = oport_state & 0xfe;
tir[1]->tir_oport=oport_state;


}  /* matches   "if ( !mtread )  {"   */

%%


close event

end trigger

begin done partrig

end done

begin done

# Acknowledge tir register
CDOACK(VME,1,0);

# Here's the old way (2.2.1)
# poolEmpty = 0;
# tirtack(0);

end done

begin status

end status

