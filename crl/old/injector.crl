#  -*- c -*-
#  INJECTOR DAQ
#  Minimal test of HAPPEX ADCs, with VME timing board,
#  and a scaler.
#
#    Bob Michaels / Antonin Vacheret  Oct 2000
#    modified by Bryan Moffit Jun 2002
#

readout list VME1
maximum 1024,1000
vme readout

/* All the memory maps of VME modules are defined in module_map.h  */
include "../module_map.h"


# number of HAPPEX ADCs
const NADC = 3
# ADC gain, low or high ? 
# const ADC_GAINBIT = 0  /* lo gain */
const ADC_GAINBIT = 16 /* hi gain */
# define MUX output for ADCs (all the same)
const ADC_MUX = 3 /* choices are 0,1,2,3 for 4 units */
# max time to wait for ADC conversion
const MAXTIME = 5000
# Addresses of ADCs
const ADC0  = hex 4e0000
const ADC1  = hex 4c0000
const ADC2  = hex 4d0000
const ADC3  = hex 0
const ADC4  = hex 0
const ADC5  = hex 0
const ADC6  = hex 0
const ADC7  = hex 0
const ADC8  = hex 0
const ADC9  = hex 0

# Decision to add DAC noise
const ADD_DAC_NOISE = 0

# Address of Timing board
const TIMEBRD = hex b0b0

# default setup 
const  DEF_PITADAC   =    0
const  DEF_PRECDAC   =    0

# Set the delay after helicity window begins to begin integration
#const  DEF_RAMPDELAY =  1200
const  DEF_RAMPDELAY =  200
   
# Single sampling
#  DEF_INTEGTIME = 12000 ok for 10 uA beam???, oversamp=1
#  Behavior at injector daq: 30hz triggers two samples within helicity window
const  DEF_INTEGTIME = 5000
const  DEF_OVERSAMPLE=    0
# 2 oversamples, Good for 100 uA beam.
#const  DEF_INTEGTIME = 6000
#const  DEF_OVERSAMPLE= 1
# 3 oversamples, can stay in low gain
#const  DEF_INTEGTIME =  4120
#const  DEF_OVERSAMPLE=    2
# 5 oversamples, remind to put adcs in high gain ADC_GAINBIT = 16
#const  DEF_INTEGTIME =  2550
#const  DEF_OVERSAMPLE=    4
# 11 oversamples, remind to put adcs in high gain ADC_GAINIT = 16
#    Leaves 7.2 us after MPS deadtime ends and about 350 us before MPS 
#    deadtime begins for orig. TimeBoard.
#const  DEF_INTEGTIME =  1150
#const  DEF_OVERSAMPLE=    10

# Number of scaler
const NSCALER = 1
# Addresses of the scaler (Motorola PPC 2306 with A24 offset 0xe0000000)
#                         (Motorola PPC 5100 with A24 offset 0xfa000000)
# Switch all this, depending on which kind of scaler 
# Must be consistent with preprocessor switch below (TYPE_SIS3800, etc)
#  (SIS3800)
const SCALER0 = hex faa50000
#  (SIS3801)
# const SCALER0 = hex a50000
#  (LeCroy 1151)
#const SCALER0 = hex e0ceb400   
#  (CAEN 560)
#const SCALER0 = hex e0a40000

# if LINUXHOST=1(0) host is linux(not)
const LINUXHOST = 1
const TRIG_ADDR = hex 0ad0


const OPORT_BUSY = 1   /* bit 1 = busy output */
const OPORT_INB  = 2   /* bit 2 = inhibit output for other 2 DAQs */
const OPORT_LNE  = 4   /* bit 3 = LNE for scaler FIFO */
int oport_state;   /* output port state (global variable) */
int csrval = 0;
# Addresses of ADCs (maximum of 10 for now)
unsigned long ADC[10] = {ADC0, ADC1, ADC2, ADC3, ADC4, ADC5, ADC6, ADC7, ADC8, ADC9};

extern int bigendian_out;
static FUNCPTR handlerPtr;
VOIDFUNCPTR isr;

volatile static unsigned short dac_count[NADC];    /* DAC is write only, keep copy here */

volatile struct vme_happex_adc *adc[NADC];
volatile struct vme_happex_tb *tboard;

# Switch here if picking a different kind of scaler
# Either TYPE_SIS3800, TYPE_LEC1151, or TYPE_CAEN560 may be one, not all 1.
%% 
#undef TYPE_CAEN560
#define TYPE_SIS3800 
#undef TYPE_LEC1151 
#ifdef TYPE_SIS3800
volatile struct SIS3800 *pscaler[NSCALER];
#endif
#ifdef TYPE_SIS3801
volatile struct fifo_scaler *pscaler[NSCALER];
#define DATA_MASK 0xffffff
#endif
#ifdef TYPE_LEC1151
volatile struct lecroy_1151_scaler *pscaler[NSCALER];
#endif
#ifdef TYPE_CAEN560
volatile struct caen_v560_scaler *pscaler[NSCALER];
#endif
%%


begin download

# Sending data to Little-Endian EB
%%  
  int i,mode,res;
  unsigned short temp;
  unsigned long laddr;
  extern void srand();
int chkcsr, retry;

  if (LINUXHOST) {
      printf("Assuming EB is on a Little-Endian cpu\n");      
      bigendian_out = 0;
  }

/* Setup Device Pointers */

/* TIR Pointer */
  res = (unsigned long) sysBusToLocalAdrs(0x29,TRIG_ADDR,&laddr);
  if (res != 0) {
     printf("Error in sysBusToLocalAdrs res=%d \n",res);
  } else {
     printf("Trigger Interface address = 0x%x\n",laddr);
     tir[1] = (struct vme_tir *)laddr;
  }

/* ADC Pointers */
for (i = 0; i < NADC; i++) {
  res = sysBusToLocalAdrs(0x39,ADC[i],&laddr);
  if (res != 0) {
     printf("Error in sysBusToLocalAdrs res=%d \n",res);
     printf("ERROR:  ADC num %d POINTER NOT INITIALIZED",i);
  } else {
     printf("HAPPEX ADC num %d address = 0x%x ",i,laddr);
     adc[i] = (struct vme_happex_adc *)laddr;
  
     /* Set ADC CSR */
     csrval = 0;
     if (i < 10) {  
       csrval |= ADC_GAINBIT;
     } else {
       csrval |= 16;    // Keep certain ADCs at ALWAYS the same gain?
     }

     csrval |= ADC_MUX;
     
     if (ADD_DAC_NOISE == 1) csrval |= 0x8;
     
     adc[i]->csr = csrval;
     chkcsr = (adc[i]->csr)&0x00FF;
     retry = 0;
     while (csrval != chkcsr) { // Make sure the correct CSR is written
       adc[i]->csr = csrval;
       chkcsr = (adc[i]->csr)&0x00FF;
       retry++;
     }
     printf("csr = 0x%x retries = %d\n",adc[i]->csr, retry);
     dac_count[i] = 3000;  
     adc[i]->dac = dac_count[i];  
  }
}

/* Timing Board Pointer */
  res = (unsigned long) sysBusToLocalAdrs(0x29,TIMEBRD,&laddr);
  if (res != 0) {
     printf("Error in sysBusToLocalAdrs res=%d \n",res);
  } else {
     printf("HAPPEX Timing Board address = 0x%x\n",laddr);
     tboard = (struct vme_happex_tb *)laddr;
  }
 
 tboard->pitadac = DEF_PITADAC; 
 tboard->precdac = DEF_PRECDAC;
 tboard->rampdelay = DEF_RAMPDELAY;
 tboard->integtime  = DEF_INTEGTIME;
 tboard->oversample = DEF_OVERSAMPLE;
 printf("HAPPEX TIME BOARD setup: \n");
 printf("pita dac:0x%x, precision dac:0x%x\n",DEF_PITADAC,DEF_PRECDAC);
 printf("ramp delay:0x%x, integrat time:0x%x, oversample:0x%x \n\n",
    DEF_RAMPDELAY,DEF_INTEGTIME,DEF_OVERSAMPLE); 


/* switch this, depending on which kind of scaler */
#ifdef TYPE_SIS3801
  res = sysBusToLocalAdrs(0x39,SCALER0,&laddr);
  if (res != 0) {
     printf("Error in sysBusToLocalAdrs res=%d \n",res);
     printf("ERROR:  SCALER POINTER NOT INITIALIZED");
  } else {
     printf("SIS3801 Scaler address = 0x%x\n",laddr);
     pscaler[0] = (struct fifo_scaler *)laddr;
  }

  pscaler[0]->reset=1;
  pscaler[0]->csr=0xff00fc00;
  pscaler[0]->clear=1;
  pscaler[0]->enable=1;
  mode = 2;
  tmode = mode << 2;
  pscaler[0]->csr=0x00000C00;  /* clear Mode bits to Mode 0*/
  pscaler[0]->csr=tmode;       /* set new Mode */
  pscaler[0]->csr=0x10000;     /* Enable External Next Clock */
  pscaler[0]->csr=0x40000;     /* Enable External Disable */
#endif 
#ifdef TYPE_SIS3800
  pscaler[0] = (struct SIS3800 *) SCALER0;
   for (i=0; i < NSCALER; i++) {
     pscaler[i]->reset = 1;
     pscaler[i]->csr = 0x7000fd00;
     pscaler[i]->clear = 1;
     pscaler[i]->enclk = 1;
     pscaler[i]->csr=0x00000C00;  /* clear Mode bits to Mode 0*/
     mode = 1;
     pscaler[i]->csr=(mode<<2);       /* set mode */
  }
#endif
#ifdef TYPE_LEC1151
   pscaler[0] = (struct lecroy_1151_scaler *) SCALER0;
   for (i=0; i < NSCALER; i++) {
       pscaler[i]->reset = 0;
   }
#endif
#ifdef TYPE_CAEN560
   pscaler[0] = (struct caen_v560_scaler *) SCALER0;
   for (i=0; i < NSCALER; i++) {
       pscaler[i]->ClrR = 0;
       temp = pscaler[i]->clrVETOR;
   }
#endif

   srand(9421);       /* seed random num generator */

/* Clear TIR */
   tir[1]->tir_csr = 0x80;
/* inhibit bit */
   oport_state |= OPORT_INB;   
   tir[1]->tir_oport=oport_state;

%%

  log inform "User Download Executed"

end download
    
begin prestart

  log inform "Entering User Prestart"

  init trig source VME
#ifdef FLOGME
  link async trig source VME 1 to partig and partrig_done
#else

%%
/* The following replaces the line
   "link async trig source VME 1 to partrig and partrig_done"
   which was erroneously clearing the TIR outputs */

    { void partrig (); void partrig_done (); 
      doneRtns[trigId] = (FUNCPTR) ( partrig_done ) ; 
      trigRtns[trigId] = (FUNCPTR) ( partrig ) ; 
      Tcode[trigId] = ( 1 ) ; ttypeRtn = tirttype ; 
      {  printf("Linking async VME trigger to id %d \n", trigId ); 
         VME_handlers = ( trigId ); VME_isAsync = 1;
         handlerPtr = (FUNCPTR) 0;
         if (handlerPtr) free(handlerPtr);
         tir[1]->tir_vec = 0xec ;
         if((intDisconnect(((VOIDFUNCPTR *) ( 0xec  )) ) !=0))
               printf("Error disconnecting Interrupt\n");
         isr = VME_int_handler;
         intConnect(((VOIDFUNCPTR *) ( 0xec  )) ,isr,0);
      };
      trigId++;
     };  
%%
#endif

  event type 1 then read VME 1

  log inform "User Prestart Executed"

end prestart

begin end

  CDODISABLE(VME,1,0);

# inhibit bit
  oport_state |= OPORT_INB;   
  tir[1]->tir_oport=oport_state;

/* Disable LNE Flag */
   oport_state = oport_state & 0xfb;
   tir[1]->tir_oport=oport_state;

  log inform "User End Executed"

end end

begin pause

  CDODISABLE(VME,1,0);
  log inform "User Pause Executed"

end pause

begin go
  
  log inform "Entering User Go Go (bob)"
  
%% 
  int i;
  unsigned short temp;
#ifdef TYPE_SIS3800
/* SIS3800 */
  for (i=0; i<NSCALER; i++) pscaler[i]->clear = 1;
#endif
#ifdef TYPE_SIS3801
/* SIS3801 */
  for (i=0; i<NSCALER; i++) {
    pscaler[i]->csr = 0x1000000; /* disable LNE */
    pscaler[i]->clear = 1;
    pscaler[i]->next = 1;  /* flush FIFO */
    pscaler[i]->csr = 0x10000; /* enable LNE */
  }
#endif
#ifdef TYPE_LEC1151
/* LeCroy 1151 */
  for (i=0; i<NSCALER; i++) pscaler[i]->reset = 1;
#endif
#ifdef TYPE_CAEN560
   for (i=0; i < NSCALER; i++) {
       pscaler[i]->ClrR = 0;
       temp = pscaler[i]->clrVETOR;
   }
#endif
 

/* remove the inhibit */
%%  
  log inform "wait... will remove inhibit"
  taskDelay(600);
  log inform "about to remove inhibit"
  oport_state = oport_state & 0xfd; 
  tir[1]->tir_oport=oport_state;

/* Enable LNE Flag */
   oport_state |= OPORT_LNE;
   tir[1]->tir_oport=oport_state;


  CDOENABLE(VME,1,0);

end go

begin trigger partrig

  variable i,j
  static int dacvalue1=30000;
  static int dacvalue2=0;
  static int maxdac=63000;
  static int maxpita=4095;
  static int ncnt=0;
  int timeout,donetest;
  unsigned int rannum;
  int tir_dat;
  extern int rand();
  int errstat;
  unsigned long sdata[NSCALER*32*12];
  int shortdelay;

/* Enable BUSY Flag */
  oport_state |= OPORT_BUSY;
  tir[1]->tir_oport=oport_state;

  rol->dabufp = (long *)0;
  open event type EVTYPE of BT_UI4

  ncnt++;

%%


/* Put scalers at beginning of readout */


#ifdef TYPE_SIS3801
errstat = 0;
for (i = 0; i <NSCALER; i++) {
  timeout = 0;
  while ( (pscaler[i]->csr&FIFO_EMPTY) != FIFO_EMPTY && timeout++ < 10) {
    for (j = 0; j < 32; j++) {
      sdata[i*32+j] = ((int)pscaler[i]->fifo[0])&DATA_MASK;  
    }
  }
}
if (timeout > 1) errstat = 1;
*rol->dabufp++ = 0xfffca000 + NSCALER + (errstat<<4);   /* Header for scaler */
for (i = 0; i <NSCALER; i++){
  for (j = 0; j < 32; j++) {
    *rol->dabufp++ = sdata[i*32+j];
  }
}
#else 

*rol->dabufp++ = 0xfffca000 + NSCALER;   /* Header for scaler */

#endif

#ifdef TYPE_SIS3800
/* SIS3800 scaler */
  for (i=0; i < NSCALER; i++) {
    for (j=0; j < 32; j++) {
      *rol->dabufp++ = pscaler[i]->readCounter[j];
    }
  }
  /* FOR TESTING PURPOSES... clear scalers after counters are read out */
  /* for (i=0; i<NSCALER; i++) pscaler[i]->clear = 1; */

#endif
#ifdef TYPE_LEC1151
/* LeCroy 1151 scaler */
  for (i=0; i < NSCALER; i++) {
    for (j=0; j < 16; j++) {
      *rol->dabufp++ = pscaler[i]->scaler[j];
    }
    for (j=0; j < 16; j++) *rol->dabufp++ = 0;  
  }
#endif
#ifdef TYPE_CAEN560
/* CAEN model 560 scaler */
  for (i=0; i < NSCALER; i++) {
    for (j=0; j < 16; j++) {
      *rol->dabufp++ = pscaler[i]->CntR[j];
    }
    for (j=0; j < 16; j++) *rol->dabufp++ = 0;  
  }
#endif

  *rol->dabufp++ = 0xffadc000 + NADC;   /* Header for ADC */  
  for (i=0; i < NADC; i++) {
       timeout = 0;
       donetest = 1;
       while ( donetest ) {
           donetest = (adc[i]->done & 1);  /* bit 0 = not.done */
           if (timeout++ >= MAXTIME) break;
       }
       if (timeout < MAXTIME) {
/* Reshuffle the ADC channels into a more logical order and remap to avoid the gap */
         *rol->dabufp++ = (adc[i]->adchan[0] + 0x8000) & 0xffff;
         *rol->dabufp++ = (adc[i]->adchan[2] + 0x8000) & 0xffff;
         *rol->dabufp++ = (adc[i]->adchan[1] + 0x8000) & 0xffff;
         *rol->dabufp++ = (adc[i]->adchan[3] + 0x8000) & 0xffff;
         *rol->dabufp++ = adc[i]->csr & 0xffff;

         *rol->dabufp++ = dac_count[i] & 0xffff;   /* adc->dac is write only */

       } else { /* error */
         for (j = 0; j < 6; j++) *rol->dabufp++ = -1;
       }
  }

  *rol->dabufp++ = 0xffdaf000;    /* Header for misc. info of event */
  tir_dat = tir[1]->tir_dat;
  *rol->dabufp++ = tir_dat & 0xfff;
  *rol->dabufp++ = 0xfffbd000;    /*  Header for timing board info */
  *rol->dabufp++ = tboard->data;
  *rol->dabufp++ = tboard->rampdelay;
  *rol->dabufp++ = tboard->integtime;
  *rol->dabufp++ = tboard->oversample;
  *rol->dabufp++ = dacvalue1;    /* precdac reg is write only */
  *rol->dabufp++ = dacvalue2;    /* PITA dac */

if (ADD_DAC_NOISE == 1) {
  for(i = 0; i < NADC; i++) {
    rannum = 2148 + rand();   /* rand goes from 0 to 32768 */
    
    dac_count[i] = (unsigned short)rannum; 

    /*
      if (rannum % 2 == 0){
      dac_count[i] = 5000;
      }
      else{ 
      dac_count[i] = 60000;
      }             
    */
    shortdelay = adc[i]->csr; // Need for DACnoise to work on ALL ADCs.
    adc[i]->dac = dac_count[i];  
  }
}


/* This is for tests using tboard dac */

/*  rannum = 2000 + rand();*/

/*  dacvalue1 = int(640*rand())*100 */
/*  dacvalue1 = dacvalue1 + 100; */
  dacvalue1 = 1;

     
/*  if (dacvalue1 >= maxdac) dacvalue1 = 0; */

  if (dacvalue1 >= maxdac) dacvalue1 = 18000;
  tboard->precdac = dacvalue1;

/*  test for differences measurements...

  if (rannum % 2 == 0){
    dacvalue1 = 49000;  
  } else{
    dacvalue1 = 50000; 
  }

*/

  tboard->pitadac = dacvalue2;  
  dacvalue2 = dacvalue2 + 10; 
/*  dacvalue2 = 1;  */
  if (dacvalue2 >= maxpita) dacvalue2 = 0;

  oport_state = oport_state & 0xfe;
  tir[1]->tir_oport=oport_state;

%%

  close event

end trigger

begin done partrig

end done

begin done

# Acknowledge tir register
  poolEmpty = 0;
  tirtack(0);

end done

begin status

end status
























