#  -*- c -*-
# 
# CODA Readout list for Injector crate
#
# Aug 2009
# Adapted from happex2.crl, with ts control and
# some hand-shaking to Qweak crate
# 

readout list VME1
maximum 10240,100
vme readout
ts control

/* All the memory maps of VME modules are defined in module_map.h  */
include "../module_map.h"
/* User strings to control some readout */
include "usrstrutils.c"
include "tir_oport_utils.c"

# default timing board DAC values
const  DEF_DAC12   =    0       /* output voltage = 0 */
const  DEF_DAC16   =    32767   /* output voltage = 0 */
# all other timing parameters are set in separate utilities

# Number of random array elements
# 2e6 good for 2 hours (at 30Hz) for 9 ADCs.
const RANDNUM = 2000000

# Number of scalers (set to two, might be one... still okay)
const NSCALER = 1
# Switch all this, depending on which kind of scaler 
# Must be consistent with preprocessor switch below (TYPE_SIS3800, etc)
const SCALER0 = hex a40000
const SCALER1 = hex a50000

# if LINUXHOST=1(0) host is linux(not)
const LINUXHOST = 1
const TRIG_ADDR = hex 0ad0
const FLEXIO_ADDR = hex 0ed0

const FIFO_EMPTY = hex 100

const OPORT_BUSY = 1   /* bit 1 = busy output */
const OPORT_INB  = 2   /* bit 2 = inhibit output for other 2 DAQs */
const OPORT_LNE  = 4   /* bit 3 = LNE for scaler FIFO */
const OPORT_HSHK = 8   /* bit 4 = handshake to injector crate */

static int noscaler, scaler2, bmwscan, tbreadout, evtypefix, flexio, flexio2;
static int qwkinj;

unsigned short ranny[RANDNUM];  /* array of random integers */

extern int bigendian_out;
static FUNCPTR handlerPtr;
VOIDFUNCPTR isr;

volatile struct vme_flex_io *flex_io;

# Switch here if picking a different kind of scaler
# Either TYPE_SIS3801, TYPE_SIS3800, TYPE_LEC1151, or TYPE_CAEN560 
# may be one, not all 1.
%% 
#undef TYPE_CAEN560
#undef TYPE_SIS3800 
#undef TYPE_LEC1151 
#define TYPE_SIS3801
#ifdef TYPE_SIS3801
volatile struct fifo_scaler *pscaler[NSCALER];
#define DATA_MASK 0xffffff
#endif
#ifdef TYPE_SIS3800
volatile struct SIS3800 *pscaler[NSCALER];
#endif
#ifdef TYPE_LEC1151
volatile struct lecroy_1151_scaler *pscaler[NSCALER];
#endif
#ifdef TYPE_CAEN560
volatile struct caen_v560_scaler *pscaler[NSCALER];
#endif

%%

begin download

# Sending data to Little-Endian EB
%%  
  int i,j,tmode,mode,res;
  unsigned short temp;
  unsigned long laddr;
  extern void srand();
  extern int rand();
  int chkcsr, retry;
  CODA_RUN_IN_PROGRESS = 0;

  if (LINUXHOST) {
      printf("Assuming EB is on a Little-Endian cpu\n");      
      bigendian_out = 0;
  }

init_strings();

noscaler=0;scaler2=0;bmwscan=0;tbreadout=0;evtypefix=0;flexio=0,flexio2=0;
qwkinj=0;
noscaler  = getflag(NOSCALER);   /* No scaler used for this crate */
scaler2   = getflag(SCALER2);    /* Use 2 scalers for this crate */
bmwscan   = getflag(BMWSCAN);    /* Readout Beam Modulation and Scan Words */
tbreadout = getflag(TBREADOUT);  /* Write Timing Board config to file */
evtypefix = getflag(EVTYPEFIX);  /* Correct event type for Injector DAQ */
flexio    = getflag(FLEXIO);     /* Readout Flexible I/O Module */
flexio2   = getflag(FLEXIO2);    /* Readout Flexible I/O Module */
qwkinj    = getflag(QWKINJ);     /* To handshake with Qweak injector crate */
bmwscan=1;

/* Printout User String Configuration */
printf("*** User String Configuration ***\n");
if(noscaler == 0) {
  printf("WILL readout scaler: %d\n",noscaler);
} else {
  printf("Will NOT readout scaler: %d\n",noscaler);
}
if(scaler2 == 0) {
  printf("Will NOT readout second scaler\n");
} else {
  printf("WILL readout second scaler\n");
}
if(bmwscan==1) {
  printf("WILL readout Beam Modulation and Scan Words: %d\n",bmwscan);
} else {
  printf("Will NOT readout Beam Modulation and Words: %d\n",bmwscan);
}
if(tbreadout==1) {
  printf("WILL write timing board config to file: %d\n",tbreadout);
} else {
  printf("Will NOT write timing board config to file: %d\n",tbreadout);
}
if(evtypefix) {
  printf("WILL use EVTYPE fix for Injector DAQ: %d\n",evtypefix);
}
if(flexio==1) {
  printf("WILL readout Flexible IO Module: %d\n",flexio);
} else {
  printf("Will NOT readout Flexible IO Module: %d\n",flexio);
}
if(flexio2==1) {
  printf("WILL readout Flexible IO Module2: %d\n",flexio2);
} else {
  printf("Will NOT readout Flexible IO Module2: %d\n",flexio2);
}
if (qwkinj==1) {
  printf("Will handshake with Qweak injector crate \n");
} else {
  printf("Will NOT handshake with Qweak injector crate \n");
}

/* Setup Device Pointers */

/* Setup TIR */
tirInit(TRIG_ADDR);


/* TIR Pointer  - the old way (CODA v<2.2.1)
   res = sysBusToLocalAdrs(0x29,TRIG_ADDR,&laddr);
   if (res != 0) {
   printf("Error in sysBusToLocalAdrs res=%d \n",res);
   printf("ERROR:  TIR POINTER NOT INITIALIZED");
   } else {
   printf("Trigger Interface address = 0x%x\n",laddr);
   tir[1] = (struct vme_tir *)laddr;
   }
*/

if(flexio == 1) {
  /* FlexIO Pointer */
  res = sysBusToLocalAdrs(0x29,FLEXIO_ADDR,&laddr);
  if (res != 0) {
    printf("Error in sysBusToLocalAdrs res=%d \n",res);
    printf("ERROR:  FlexIO POINTER NOT INITIALIZED");
  } else {
    printf("FlexIO address = 0x%x\n",laddr);
    flex_io = (struct vme_flex_io *)laddr;
  }
  flex_io->csr1 = 0x8000; /* Reset Module */
  flex_io->csr1 = 0x3;    /* Enable External Strobe and Latch Mode */
}

if(flexio2 == 1) {
  /* FlexIO2 Pointer */
  res = sysBusToLocalAdrs(0x29,FLEXIO_ADDR,&laddr);
  if (res != 0) {
    printf("Error in sysBusToLocalAdrs res=%d \n",res);
    printf("ERROR:  FlexIO2 POINTER NOT INITIALIZED");
  } else {
    printf("FlexIO2 address = 0x%x\n",laddr);
    flex_io = (struct vme_flex_io *)laddr;
  }
/*   flex_io->csr1 = 0x8000; /\* Reset Module *\/ */
/*   flex_io->csr1 = 0x3;    /\* Enable External Strobe and Latch Mode *\/ */
  flex_io->csr2 = 0x8000; /* Reset Module */
  flex_io->csr2 = 0x3;    /* Enable External Strobe and Latch Mode */
}

/* ADC Configuration */
// show default configurations
  showHAPADC(-1);

/* Timing Board configuration */
/* THIS VERSION: sets the timing board HERE */
   setDACHAPTB(1,DEF_DAC12);
   setDACHAPTB(2,DEF_DAC16);
   setTimeHAPTB(0,13200);
   setOverSampleHAPTB(0);
   printf("Setting Oversampleing");
   dumpRegHAPTB();


if(noscaler == 0) {
  /* switch this, depending on which kind of scaler */
#ifdef TYPE_SIS3801
  res = sysBusToLocalAdrs(0x39,SCALER0,&laddr);
  if (res != 0) {
    printf("Error in sysBusToLocalAdrs res=%d \n",res);
    printf("ERROR:  SCALER POINTER NOT INITIALIZED");
  } else {
    printf("SIS3801 Scaler address = 0x%x\n",laddr);
    pscaler[0] = (struct fifo_scaler *)laddr;
  }
  
  pscaler[0]->reset=1;
  pscaler[0]->csr=0xff00fc00;
  pscaler[0]->clear=1;
  pscaler[0]->enable=1;
  mode = 2;
  tmode = mode << 2;
  pscaler[0]->csr=0x00000C00;  /* clear Mode bits to Mode 0*/
  pscaler[0]->csr=tmode;       /* set new Mode */
  pscaler[0]->csr=0x10000;     /* Enable External Next Clock */
  pscaler[0]->csr=0x40000;     /* Enable External Disable */

  /* Do this for a second scaler */
  if(scaler2==1) {
    res = sysBusToLocalAdrs(0x39,SCALER1,&laddr);
    if (res != 0) {
      printf("Error in sysBusToLocalAdrs res=%d \n",res);
      printf("ERROR:  SCALER POINTER NOT INITIALIZED");
    } else {
      printf("SIS3801 Scaler address = 0x%x\n",laddr);
      pscaler[1] = (struct fifo_scaler *)laddr;
    }
  
    pscaler[1]->reset=1;
    pscaler[1]->csr=0xff00fc00;
    pscaler[1]->clear=1;
    pscaler[1]->enable=1;
    mode = 2;
    tmode = mode << 2;
    pscaler[1]->csr=0x00000C00;  /* clear Mode bits to Mode 0*/
    pscaler[1]->csr=tmode;       /* set new Mode */
    pscaler[1]->csr=0x10000;     /* Enable External Next Clock */
    pscaler[1]->csr=0x40000;     /* Enable External Disable */
  }
#endif  
#ifdef TYPE_SIS3800
  pscaler[0] = (struct SIS3800 *) SCALER0;
  for (i=0; i < NSCALER; i++) {
    pscaler[i]->reset = 1;
    pscaler[i]->csr = 0x7000fd00;
    pscaler[i]->clear = 1;
    pscaler[i]->enclk = 1;
    pscaler[i]->csr=0x00000C00;  /* clear Mode bits to Mode 0*/
    mode = 1;
    pscaler[i]->csr=(mode<<2);       /* set mode */
  }
#endif
#ifdef TYPE_LEC1151
  pscaler[0] = (struct lecroy_1151_scaler *) SCALER0;
  for (i=0; i < NSCALER; i++) {
    pscaler[i]->reset = 0;
  }
#endif
#ifdef TYPE_CAEN560
  pscaler[0] = (struct caen_v560_scaler *) SCALER0;
  for (i=0; i < NSCALER; i++) {
    pscaler[i]->ClrR = 0;
    temp = pscaler[i]->clrVETOR;
  }
#endif
}

srand(9421);       /* seed random num generator */


/* Clear TIR */
tir[1]->tir_csr = 0x80;

%%

log inform "User Download Executed"

end download
    
begin prestart

log inform "Entering User Prestart"

%%
  int j;
  unsigned short tmp_rand;
  int bad_randmake=0;
  extern void srand();
  extern int rand();

/* Fill Random Integer Array 
   Do this during prestart, so that each run has a different ranny array*/

printf("Generating Random Integer Array\n");
printf("Number of Array elements = %d\n",RANDNUM);
srand(ncnt);  /* seed random number generator with the event counter */
bad_randmake=0;
for (j=0;j<RANDNUM;j++) {
  /* Generate random integers from 2048 to 63488 */
  tmp_rand = (unsigned short) (61440.0*rand()/(32768+1.0));
  while(tmp_rand==0 || tmp_rand==-1) {
    bad_randmake=1;
    tmp_rand = (unsigned short) (61440.0*rand()/(32768+1.0));
  }
  ranny[j] = 2048 + tmp_rand;
}

if(bad_randmake==1) {
  int badfile;
  
  badfile=fopen("~apar/bryan/badrand/badrand.hist","a");
  fprintf(badfile,"Another bad random number generation at ncnt=%d\n",
	  ncnt);
  fclose(badfile);
}
%%

  init trig source VME

%%
/* The following replaces the line
   "link async trig source VME 1 to partrig and partrig_done"
   which was erroneously clearing the TIR outputs 
   This is some code we might not need anymore - Bryan 02Apr04

    { void partrig (); void partrig_done (); 
      doneRtns[trigId] = (FUNCPTR) ( partrig_done ) ; 
      trigRtns[trigId] = (FUNCPTR) ( partrig ) ; 
      Tcode[trigId] = ( 1 ) ; ttypeRtn = tirttype ; 
      {  printf("Linking async VME trigger to id %d \n", trigId ); 
         VME_handlers = ( trigId ); VME_isAsync = 1;
         handlerPtr = (FUNCPTR) 0;
         if (handlerPtr) free(handlerPtr);
         tir[1]->tir_vec = 0xec ;
         if((intDisconnect(((VOIDFUNCPTR *) ( 0xec  )) ) !=0))
               printf("Error disconnecting Interrupt\n");
         isr = VME_int_handler;
         intConnect(((VOIDFUNCPTR *) ( 0xec  )) ,isr,0);
      };
      trigId++;
     };  
*/

%%
  link async trig source VME 1 to partrig and partrig_done
  event type 1 then read VME 1

%%

  if(tbreadout==1) {
    /* Send timing board information to ~apar/db/timebrd/timebrd.cfg */
    
    int fdbfile;
    
    fdbfile=fopen("~apar/db/timebrd/timebrd.cfg","w");
    fprintf(fdbfile,"# Timing board information:\n# Integrate Time = %.2f ms, Ramp Delay = %.2f us\n\ \ \ \ oversamp %d ",
	    (double)getIntTimeHAPTB()*0.0025,
	    (double)getRampDelayHAPTB()*2.5,
	    (int)getOverSampleHAPTB()+1);
    fclose(fdbfile);
  }

%%

  log inform "User Prestart Executed"

end prestart

begin end

  CDODISABLE(VME,1,0);

/* Disable LNE Flag */
  unset_tir_oport(OPORT_LNE);

  CODA_RUN_IN_PROGRESS = 0;

  log inform "User End Executed"

end end

begin pause

  CDODISABLE(VME,1,0);
  log inform "User Pause Executed"

end pause

begin go
  
  log inform "Entering User Go Go (bob)"
  
%% 
  int i, nscaler;
  unsigned short temp;

if(noscaler == 0) {
#ifdef TYPE_SIS3801
  /* SIS3801 */
  if(scaler2==1) {
    nscaler = 2;
  } else {
    nscaler = 1;
  }
  for (i=0; i<nscaler; i++) {
    pscaler[i]->csr = 0x1000000; /* disable LNE */
    pscaler[i]->clear = 1;
    pscaler[i]->next = 1;  /* flush FIFO */
    pscaler[i]->csr = 0x10000; /* enable LNE */
  }
#endif
#ifdef TYPE_SIS3800
  /* SIS3800 */
  for (i=0; i<NSCALER; i++) pscaler[i]->clear = 1;
#endif
#ifdef TYPE_LEC1151
  /* LeCroy 1151 */
  for (i=0; i<NSCALER; i++) pscaler[i]->reset = 1;
#endif
#ifdef TYPE_CAEN560
  for (i=0; i < NSCALER; i++) {
    pscaler[i]->ClrR = 0;
    temp = pscaler[i]->clrVETOR;
  }
#endif
}

if(flexio == 1) {
  flex_io->csr1 = 0x100; /* Re-Activate Strobe */
  flex_io->csr1 = 0x03; /* Re-Activate Strobe */
}
if(flexio2 == 1) {
/*   flex_io->csr1 = 0x100; /\* Re-Activate Strobe *\/ */
/*   flex_io->csr1 = 0x03; /\* Re-Activate Strobe *\/ */
  flex_io->csr2 = 0x100; /* Re-Activate Strobe */
  flex_io->csr2 = 0x03; /* Re-Activate Strobe */
}

/* remove the inhibit */
%%  
/* We dont actually use this anymore.. */
/* But just in case... just comment out the taskDelay. */
   log inform "wait... will remove inhibit"
   //   taskDelay(600);
   log inform "about to remove inhibit"

/* Enable LNE Flag */
   set_tir_oport(OPORT_LNE);

  CDOENABLE(VME,1,0);
  CODA_RUN_IN_PROGRESS = 1;

end go

begin trigger partrig

variable i,j, event_ty, event_no
unsigned long ltest;
unsigned short junk;
static int dac16val=DEF_DAC16;
static int dac12val=DEF_DAC12;
static int maxdac16=65535;
static int maxdac12=3650;
int timeout;
unsigned short rannum;
int tirdata,g0bit,g0ack;
static int k;
static int rannyint;
int errstat;
unsigned long sdata[NSCALER*32*12];
int pulseclean;
int localBMWobj;
int localBMWval;
int localBMWcycnum;
int nscaler;
int iocTime;
int ldebug=0;

int* intpointer;

%%

/* Enable BUSY Flag */
set_tir_oport(OPORT_BUSY);

if(evtypefix==1) EVTYPE &= 1;  /* Fix event type for Injector DAQ */
event_ty = EVTYPE;
event_no = *rol->nevents;
iocTime = vxTicks;
%%

rol->dabufp = (long *)0;
open event type EVTYPE of BT_UI4

# DEBUGGING PURPOSES ONLY 
# output hex ffbb0000
# output event_ty
# output event_no

ncnt++;

%%

/* Read TIR in any case */
/* When standalone, get data from tir_dat; when TS-mode use tir_iport */
/*  tirdata = tir[1]->tir_iport;  */
       tirdata = tir[1]->tir_dat; 

// Obtain helicity info first.  Either from flexio or from TIR.
*rol->dabufp++ = 0xffdaf000;    /* Header for TIR */
if(flexio==1) {
  *rol->dabufp++ = flex_io->data1;
  flex_io->csr1 = 0x100;
  flex_io->csr1 = 0x03;
  junk = flex_io->csr1;
} else if(flexio2==1) {
  *rol->dabufp++ = flex_io->data2;
/*   flex_io->csr1 = 0x100; */
/*   flex_io->csr1 = 0x03; */
  flex_io->csr2 = 0x100;
  flex_io->csr2 = 0x03;
  junk = flex_io->csr2;
} else {
  *rol->dabufp++ = tirdata & 0xfff;
}

if(bmwscan==1) {
  //////////////////////////////////////////////////
  //
  // BMW: early in readout! (the bmw process in asynchronous,
  //      and we don't want nuthin' to change before we see it
  //
  //////////////////////////////////////////////////
  localBMWobj = bmw_object;
  localBMWval = bmw_value;
  localBMWcycnum = bmw_cycle_number;
  
  //  record if event was unclean for any portion of pulse
  pulseclean = bmw_clean_pulse;
  
  //  if pulse was at some point unclean, but ended clean, prepare
  //  next pulse to be seen as clean
  if (!(pulseclean==1) && (bmw_clean==1)) bmw_clean_pulse=1;  
}

if(noscaler == 0) {

#ifdef TYPE_SIS3801
  if(scaler2==1) {
    nscaler=2;
  } else {
    nscaler=1;
  }
  errstat = 0;
  for (i = 0; i <nscaler; i++) {
    timeout = 0;
    while ( (pscaler[i]->csr&FIFO_EMPTY) != FIFO_EMPTY && timeout++ < 10) {
      for (j = 0; j < 32; j++) {
	sdata[i*32+j] = ((int)pscaler[i]->fifo[0])&DATA_MASK;  
      }
    }
  }
  if (timeout > 1) {
    errstat = 1;
    for (i = 0; i <nscaler; i++){
      pscaler[i]->clear = 1;
    }
  }
  *rol->dabufp++ = 0xfffca000 + nscaler + (errstat<<4); /* Header for scaler */
  for (i = 0; i <nscaler; i++){
    for (j = 0; j < 32; j++) {
      *rol->dabufp++ = sdata[i*32+j];
    }
  }
#else 
  
  *rol->dabufp++ = 0xfffca000 + NSCALER;   /* Header for scaler */
  
#endif
#ifdef TYPE_SIS3800
  /* SIS3800 scaler */
  for (i=0; i < NSCALER; i++) {
    for (j=0; j < 32; j++) {
      *rol->dabufp++ = pscaler[i]->readCounter[j];
    }
  }
  /* FOR TESTING PURPOSES... clear scalers after counters are read out */
  for (i=0; i<NSCALER; i++) pscaler[i]->clear = 1; 
#endif
#ifdef TYPE_LEC1151
  /* LeCroy 1151 scaler */
  for (i=0; i < NSCALER; i++) {
    for (j=0; j < 16; j++) {
      *rol->dabufp++ = pscaler[i]->scaler[j];
    }
    for (j=0; j < 16; j++) *rol->dabufp++ = 0;  
  }
#endif
#ifdef TYPE_CAEN560
  /* CAEN model 560 scaler */
  for (i=0; i < NSCALER; i++) {
    for (j=0; j < 16; j++) {
      *rol->dabufp++ = pscaler[i]->CntR[j];
    }
    for (j=0; j < 16; j++) *rol->dabufp++ = 0;  
  }
#endif
}

*rol->dabufp++ = 0xffadc000 + ADC_NUMSLOTS;   /* Header for ADC */  
//readoutHAPADC(rol->dabufp,ADC_NUMSLOTS-1);
for (i=0; i < ADC_NUMSLOTS; i++) rol->dabufp = readoutHAPADC(rol->dabufp,i);
//for (i=ADC_NUMSLOTS-1; i>=0; i--) rol->dabufp = readoutHAPADC(rol->dabufp,i);


*rol->dabufp++ = 0xfffbd000;    /*  Header for timing board info */
*rol->dabufp++ = getDataHAPTB();
*rol->dabufp++ = getRampDelayHAPTB();
*rol->dabufp++ = getIntTimeHAPTB();
*rol->dabufp++ = (getOverSampleCurrentHAPTB() << 8) + getOverSampleHAPTB();
*rol->dabufp++ = getDACHAPTB(2); /* DAC16 */
*rol->dabufp++ = getDACHAPTB(1); /* DAC12 */

if(bmwscan==1) {
  *rol->dabufp++ = 0xfdacf000;  // Header for daqflags

  /* Start with BMW words */
  *rol->dabufp++ = pulseclean;  //record in bmw says entire pulse was clean
  *rol->dabufp++ = localBMWobj; //record the last-moved object (from beginning of readout)
  *rol->dabufp++ = localBMWval; // record the value of the last-moved object
  *rol->dabufp++ = localBMWcycnum; // record the number of this supercycle 

  /* Scan words next */
  *rol->dabufp++ = getCleanSCAN();
  *rol->dabufp++ = getDataSCAN(1);  
  *rol->dabufp++ = getDataSCAN(2);  


  /* Now the vxWorks Clock and software event increment*/
  *rol->dabufp++ = iocTime;
  *rol->dabufp++ = ncnt;
}

for (i = 0; i < ADC_NUMSLOTS; i++) {  
  if (usesDACHAPADC(i)==1) {
    // lookup table of random numbers
    rannum = ranny[rannyint];   /* rand goes from 0 to 32768 */
    rannyint++;
    if (rannyint>RANDNUM-1) rannyint=0;
    
    setDACHAPADC(i,rannum);
  
    // alternate methods of choosing dac noise values
    //
    //       rannum = 2048 + rand();   /* rand goes from 0 to 32768 */
    //
    //        if (rannum % 2 == 0){
    //          dac_count[i] = 5000;
    //        } else {
    //          dac_count[i] = 60000;
    //        }             
    //
  }
}


// This is for tests using tboard dac

/*  rannum = 2000 + rand();*/

//  if (dac16val >= maxdac) dac16val = 18000;
//  //  test for differences measurements...    
//      if (rannum % 2 == 0){
//      dac16val = 49000;  
//      } else{
//      dac16val = 50000; 
//      }    
//  setDACHAPTB(2,dac16val);

/* For the synch monitor.  Use dac12 */
/* Note that dac12 will saturate the v2f at high voltage 
   so, set the max around 3650.*/
/* Increment dac16 by 5 each window */
if(getOverSampleCurrentHAPTB()==0) {
  dac16val = dac16val + 5; 
} 
dac12val = 1602+rand()%2048;
setDACHAPTB(1,dac12val);
getDACHAPTB(1);
setDACHAPTB(1,dac12val);
getDACHAPTB(1);
/* if (dac16val >= maxdac16) dac16val = 32767; */
/* setDACHAPTB(2,dac16val); */
/* getDACHAPTB(2); */
/* setDACHAPTB(2,dac16val); */
/* getDACHAPTB(2); */


/* if qwkinj==1, wait a finite amount of time for qweak handshake */

if (qwkinj) {

/* When standalone, get data from tir_dat; when TS-mode use tir_iport */
    tirdata = tir[1]->tir_iport;  
    /*    tirdata = tir[1]->tir_dat;  */
   
    g0bit = 0;
  
    *rol->dabufp++ = 0xb444b555;;
    *rol->dabufp++ = g0bit;

    timeout = 0;

/* wait for Qweak busy */
    while ( timeout < 20000 && g0bit != 1) {

      tirdata = tir[1]->tir_iport;  /* with TS */  

      /*  tirdata = tir[1]->tir_dat; ..if without TS */

/* changed Aug 14,  Bob M. */
      g0bit = ((tirdata&0x40) >> 6 );

      timeout++;

    }


 }

/* Clear BUSY Flag */
   unset_tir_oport(OPORT_BUSY);



%%

close event

end trigger

begin done partrig

end done

begin done

# Acknowledge tir register
CDOACK(VME,1,0);

# Here's the old way (2.2.1)
# poolEmpty = 0;
# tirtack(0);

end done

begin status

end status

